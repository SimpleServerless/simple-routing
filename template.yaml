AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Simple serverless service"

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - local
      - staging
    Description: The environment to be run on (typically local, dev, staging or prod)

  ServiceName:
    Type: String
    Description: The service name

  DataSourceName:
    Type: String
    Default: SimpleServiceStudentLambda
    Description: Simple service

  PrivateSubnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: private-subnet-1

  PrivateSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: private-subnet-2

  PrivateSubnet3:
    Type: AWS::SSM::Parameter::Value<String>
    Default: private-subnet-3

  VpcId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: VPC ID created by bootstrapper
    Default: VpcId


Mappings:
  Environment:
    dev:
      LogLevel: "INFO"
      DBHost: "simple-serverless-aurora-serverless-development.cluster-cw3bjgnjhzxa.us-east-2.rds.amazonaws.com"
      DBName: "simple_serverless_dev"

    prod:
      LogLevel: "INFO"
      DBHost: "simple-serverless-aurora-serverless-production.cluster-cw3bjgnjhzxa.us-east-2.rds.amazonaws.com"
      DBName: "simple_serverless_prod"

Resources:

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-${StageName}
      Handler: lambda_function.handler
      Runtime: python3.8
      CodeUri: ./src
      Timeout: 5
      MemorySize: 256
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: simple-serverless-database-us-east-2-${StageName}-AppSGId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Policies:
        - VPCAccessPolicy: {}

        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*

        - Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: "*"

        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:simple-serverless/*"

      Environment:
        Variables:
          STAGE: !Ref StageName
          PGHOST: !FindInMap [Environment, !Ref StageName, DBHost]
          PGPORT: 5432
          PGDATABASE: !FindInMap [Environment, !Ref StageName, DBName]
          LOG_LEVEL: !FindInMap [Environment, !Ref StageName, LogLevel]
          POWERTOOLS_SERVICE_NAME: simple-serverless


  # API Gateway (REST stuff) starts here

  SimpleRoutingAPIGateway:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub simple-rest-api-${StageName}
      ProtocolType: HTTP

  RestStudentIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref SimpleRoutingAPIGateway
      IntegrationType: "AWS_PROXY"
      IntegrationUri: !GetAtt LambdaFunction.Arn
      PayloadFormatVersion: 2.0

  RestDefaultRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      RouteKey: "ANY /"
      ApiId: !Ref SimpleRoutingAPIGateway
      Target: !Sub 'integrations/${RestStudentIntegration}'

  RestListStudentsRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      RouteKey: "GET /students"
      ApiId: !Ref SimpleRoutingAPIGateway
      Target: !Sub 'integrations/${RestStudentIntegration}'

  RestGetStudentRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      RouteKey: "GET /students/{studentId}"
      ApiId: !Ref SimpleRoutingAPIGateway
      Target: !Sub 'integrations/${RestStudentIntegration}'

  RestSaveStudentRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      RouteKey: "POST /students/{studentId}"
      ApiId: !Ref SimpleRoutingAPIGateway
      Target: !Sub 'integrations/${RestStudentIntegration}'



  #   Appsync (GraphQL stuff) starts here

  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: !Sub simple-graphql-api-${StageName}
      AuthenticationType: API_KEY
      XrayEnabled: true

  GraphqlApiKey:
    Type: "AWS::AppSync::ApiKey"
    Properties:
      Description: "Default API Key"
      ApiId: !GetAtt GraphQLApi.ApiId

  # Schema will get included with SAM PACKAGE command:
  Schema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: ./src/schema.graphql

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AppSyncInvokeLambdas
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  LambdaDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ${DataSourceName}
      Description: !Sub ${ServiceName} lambda data source."
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub ${LambdaFunction.Arn}

  ListStudentsResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: "listStudents"
      DataSourceName: !GetAtt LambdaDataSource.Name

  GetStudentsResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: "getStudent"
      DataSourceName: !GetAtt LambdaDataSource.Name

  SaveStudentsResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: "saveStudent"
      DataSourceName: !GetAtt LambdaDataSource.Name


Outputs:
  RestAPIOutput:
    Description: "The url of the rest api"
    Value: !GetAtt SimpleRoutingAPIGateway.ApiEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-RestApiUrl-${StageName}

  GraphQLApiIdOutput:
    Description: "The AppSync API ID"
    Value: !GetAtt GraphQLApi.ApiId
    Export:
      Name: !Sub ${AWS::StackName}-GraphqlApiId-${StageName}

  GraphQLUrlOutput:
    Description: "The GraphQL URL"
    Value: !GetAtt GraphQLApi.GraphQLUrl
    Export:
      Name: !Sub ${AWS::StackName}-GraphQLUrl-${StageName}

  GraphQLApiKeyOutput:
    Description: "Default API key"
    Value: !GetAtt GraphqlApiKey.ApiKey
    Export:
      Name: !Sub ${AWS::StackName}-GraphQLApiKey-${StageName}
